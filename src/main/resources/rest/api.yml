openapi: 3.0.0
info:
  description: >-
    This spec is mainly for testing Petstore server and contains fake endpoints,
    models. Please do not use this for any other purpose. Special characters: "
    \
  version: 1.0.0
  title: OpenAPI Petstore
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
paths:
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: fecha
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: size
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
  '/pet2/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPet2ById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
  '/pet3/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPet3
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: size
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet4/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test object as parameter form, explode
      operationId: getPet4
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: category
          in: query
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet5/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test object as parameter form, not explode
      operationId: getPet5
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: category
          in: query
          required: true
          style: form
          explode: false
          schema:
            $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet6/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test array as parameter spaceDelimited, explode
      operationId: getPet6
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          style: spaceDelimited
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet7/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test array as parameter spaceDelimited, not explode
      operationId: getPet7
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          style: spaceDelimited
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet8/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test array as parameter pipeDelimited, explode
      operationId: getPet8
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          style: pipeDelimited
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet9/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test array as parameter pipeDelimited, not explode
      operationId: getPet9
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          style: pipeDelimited
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
  '/pet10/other':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet, Test object as parameter deepObject, explode
      operationId: getPet10
      parameters:
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: category
          in: query
          required: true
          style: deepObject
          explode: true
          schema:
            $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
servers:
  - url: 'http://{server}.swagger.io:{port}/v2'
    description: petstore server
    variables:
      server:
        enum:
          - 'petstore'
          - 'qa-petstore'
          - 'dev-petstore'
        default: 'petstore'
      port:
        enum:
          - 80
          - 8080
        default: 80
  - url: https://localhost:8080/{version}
    description: The local server
    variables:
      version:
        enum:
          - 'v1'
          - 'v2'
        default: 'v2'
  - url: https://127.0.0.1/no_varaible
    description: The local server without variables
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          default: default-name
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          x-is-unique: true
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
        productType:
          $ref: '#/components/schemas/EnumProductType'
      xml:
        name: Pet
    EnumProductType:
      type: object
